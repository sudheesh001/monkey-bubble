dnl
dnl configure.in for monkey-bubble
dnl

dnl  -------------------------
dnl | autotool initialization |-----------------------------------------------
dnl  -------------------------

AC_INIT(configure.in)
AM_INIT_AUTOMAKE(monkey-bubble, 0.4.0)
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE

DISTCHECK_CONFIGURE_FLAGS="--disable-schemas-install --disable-scrollkeeper"
DISTCHECK_CONFIGURE_FLAGS+=" --disable-setgid"
AC_SUBST(DISTCHECK_CONFIGURE_FLAGS)

dnl --------------------------------------------------------------------------

CXX=no
F77=no

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC

dnl Initialize libtool
AM_DISABLE_STATIC
AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL
AC_PROG_INTLTOOL

dnl  ---------------
dnl | documentation |---------------------------------------------------------
dnl  ---------------

GNOME_DOC_INIT

dnl  ------------------
dnl | platform support |------------------------------------------------------
dnl  ------------------

dnl Monkey Bubble is supposed to work out of the box both on GNOME and on
dnl Maemo. This stuff checks which one should be built.
dnl
dnl Enable the platform you want to support with --with-platform={gnome,maemo}

AC_MSG_CHECKING([for platform])
AC_ARG_WITH(platform,
	    AC_HELP_STRING([--with-platform=PLATFORM],[Build for PLATFORM: "gnome" (default) or "maemo"]),
	    [case "$with_platform" in
	     "gnome")
		AC_MSG_RESULT([GNOME])
		;;
	     "maemo")
		AC_MSG_RESULT([Maemo])
		;;
	     *)
		AC_MSG_ERROR(["$with_platform" is not a valid or supported platform])
		;;
	     esac],
	    [with_platform=gnome
	     AC_MSG_RESULT([GNOME])])

if test "$with_platform" = "gnome"; then
	AC_DEFINE(GNOME,[],[defined if we're building for gnome])
elif test "$with_platform" = "maemo"; then
	AC_DEFINE(MAEMO,[],[defined if we're building for maemo])
fi

dnl  ----------------------
dnl | library dependencies |--------------------------------------------------
dnl  ----------------------

dnl Versions shared with the (upcoming) .spec file.
GTK_REQUIRED=2.0.0
G_THREAD_REQUIRED=2.0.0

AC_SUBST(GTK_REQUIRED)
AC_SUBST(G_THREAD_REQUIRED)

PKG_CHECK_MODULES(LIBMONKEYUTIL_A,[
	gtk+-2.0
	gthread-2.0
	])
AC_SUBST(LIBMONKEYUTIL_A_CFLAGS)
AC_SUBST(LIBMONKEYUTIL_A_LIBS)

PKG_CHECK_MODULES(LIBMONKEY_A,[
	gtk+-2.0
	gthread-2.0
	])
AC_SUBST(LIBMONKEY_A_CFLAGS)
AC_SUBST(LIBMONKEY_A_LIBS)

PKG_CHECK_MODULES(LIBMBINPUT_A,[
	gtk+-2.0
	gthread-2.0
	gconf-2.0
	])
AC_SUBST(LIBMBINPUT_A_CFLAGS)
AC_SUBST(LIBMBINPUT_A_LIBS)

PKG_CHECK_MODULES(LIBMONKEYVIEW_A,[
	gtk+-2.0
	gthread-2.0
	librsvg-2.0
	])
AC_SUBST(LIBMONKEYVIEW_A_CFLAGS)
AC_SUBST(LIBMONKEYVIEW_A_LIBS)

PKG_CHECK_MODULES(LIBMONKEYAUDIO_A,[
	gtk+-2.0
	gthread-2.0
	gstreamer-0.10
	])
AC_SUBST(LIBMONKEYAUDIO_A_CFLAGS)
AC_SUBST(LIBMONKEYAUDIO_A_LIBS)

PKG_CHECK_MODULES(MONKEY_SRV,[
	gtk+-2.0
	gthread-2.0
	libxml-2.0
	])
AC_SUBST(MONKEY_SRV_CFLAGS)
AC_SUBST(MONKEY_SRV_LIBS)


PKG_CHECK_MODULES(UI,[
	gtk+-2.0 >= 2.10
	gthread-2.0
	librsvg-2.0
	libgnomeui-2.0
	gstreamer-0.10
        gstreamer-base-0.10
        gstreamer-controller-0.10
	gconf-2.0
	libglade-2.0
	])
AC_SUBST(UI_CFLAGS)
AC_SUBST(UI_LIBS)

if test "$with_platform" = "gnome"; then
	PKG_CHECK_MODULES(PLATFORM,[libgnomeui-2.0])
elif test "$with_platform" = "maemo"; then
	PKG_CHECK_MODULES(PLATFORM,[hildon-1 libosso])
fi

dnl  -------------
dnl | GConf stuff |-----------------------------------------------------------
dnl  -------------

AC_PATH_PROG(GCONFTOOL, gconftool-2, no)
AM_GCONF_SOURCE_2

# Check for utility programs
AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal)

dnl --------------------------------------------------------------------------


dnl  ------------------
dnl | language support |------------------------------------------------------
dnl  ------------------

GETTEXT_PACKAGE=monkey-bubble
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE",[The package name, for gettext])

dnl Please keep this in alphabetical order
ALL_LINGUAS="ar bg ca cs da de dz el en_CA en_GB es eu fi fr hr hu ja lv ms ne nl oc pt pt_BR ru rw sr sr@Latn sv tr uk vi zh_CN zh_TW"

AM_GLIB_GNU_GETTEXT

dnl AM_GLIB_GNU_GETTEXT sets $DATADIRNAME
AC_MSG_CHECKING(locale directory)

if test "x$prefix" = "xNONE"; then
  PACKAGE_LOCALE_DIR=$ac_default_prefix/share/locale
else
  PACKAGE_LOCALE_DIR=$prefix/share/locale
fi

AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "$PACKAGE_LOCALE_DIR",
	[The directory in which gphpedit's locale data will be stored])
AC_MSG_RESULT($PACKAGE_LOCALE_DIR)

dnl  -------------------
dnl | highscore support |-----------------------------------------------------
dnl  -------------------

AC_ARG_ENABLE(setgid,
		[  --disable-setgid           Disable the use of setgid binaries],
		[case "${enableval}" in
		  yes) setgid=true ;;
		  no)  setgid=false ;;
		  *) AC_MSG_ERROR([bad value ${enableval} for --disable-setgid]) ;;
		 esac], [setgid=true])
AC_SUBST(setgid)

AC_ARG_WITH(scores-group,
		[  --with-scores-group=group  Group for the high score tables and binaries],
		scores_group="${withval}",scores_group="games")
AC_SUBST(scores_group)

AC_ARG_WITH(scores-user,
		[  --with-scores-user=user    User for the high score tables and binaries],
		scores_user="${withval}",scores_user="games")
AC_SUBST(scores_user)

scoredir='${localstatedir}/games'
AC_SUBST(scoredir)

dnl  --------
dnl | output |----------------------------------------------------------------
dnl  --------

AC_OUTPUT([
  Makefile
  data/Makefile
  pixmaps/Makefile
  pixmaps/bubbles/Makefile
  pixmaps/snake/Makefile
  pixmaps/number/Makefile
  pixmaps/frozen-bubble/Makefile
  sounds/Makefile
  src/Makefile
  src/util/Makefile
  src/input/Makefile
  src/monkey/Makefile
  src/view/Makefile
  src/audio/Makefile
  src/net/Makefile
  src/ui/Makefile
  help/Makefile
  po/Makefile.in
])

dnl --------------------------------------------------------------------------
